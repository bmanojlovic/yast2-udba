/**
 * File:	modules/Udba.ycp
 * Package:	Universal Driver Build Assistant
 * Summary:	Udba settings, input and output functions
 * Authors:	Boris Manojlovic <boris@steki.net>
 *
 * $Id: Udba.ycp 41350 2007-10-10 16:59:00Z dfiser $
 *
 * Representation of Universal Driver Build Assistant.
 * Input and output routines.
 */

{

module "Udba";
textdomain "udba";

import "Installation";
import "Progress";
import "Report";
import "Summary";
import "Message";
import "Package";
import "Popup";
import "Pkg";

/**
 * Prototypes
 */
global boolean Modified();



/**
 * Initializes the package manager
 */
global boolean InitPkg () {
    if (Pkg::TargetInitialize (Installation::destdir) != true) {
        y2error ("Cannot initialize target");
        return false;
    }

    if (Pkg::TargetLoad() != true) {
        y2error ("Cannot load target");
        return false;
    }

    if (Pkg::SourceStartManager (true) != true) {
        y2error ("Cannot initialize sources");
        return false;
    }

    return true;
}


global string current_working_package = "";

/**
 * Data was modified?
 */
boolean modified = false;

/**
 */
boolean proposal_valid = false;

/**
 * Write only, used during autoinstallation.
 * Don't run services and SuSEconfig, it's all done at one place.
 */
boolean write_only = false;

/**
 * Abort function
 * return boolean return true if abort
 */
boolean() AbortFunction = Modified;

/**
 * Required packages for operation
 * TODO Check do we really need kernel-source for building or kernel-syms should be sufficient?
 */
global list<string> required_packages = ["kernel-source", "kernel-syms", "update-desktop-files", "patch", "gcc", "grep"];


/**
 * Abort function
 * @return boolean return true if abort
 */
global define boolean Abort() ``{
    if(AbortFunction != nil)
    {
        return AbortFunction () == true;
    }
    return false;
}

/**
 * Data was modified?
 * @return true if modified
 */
global boolean Modified() {
    y2debug("modified=%1",modified);
    return modified;
}

/**
 * Mark as modified, for Autoyast.
 */
global void SetModified(boolean value) {
      modified = true;
  }

global boolean ProposalValid() {
    return proposal_valid;
}

global void SetProposalValid(boolean value) {
    proposal_valid = value;
}

/**
 * @return true if module is marked as "write only" (don't start services etc...)
 */
global boolean WriteOnly() {
    return write_only;
}

/**
 * Set write_only flag (for autoinstalation).
 */
global void SetWriteOnly(boolean value) {
    write_only = value;
}


global void SetAbortFunction(boolean() function) {
    AbortFunction = function;
}


/**
 * Read all udba settings
 * @return true on success
 */
global boolean Read() {

    /* Udba read dialog caption */
    string caption = _("Initializing Universal Driver Build Assistant");

    // TODO FIXME Set the right number of stages
    integer steps = 4;

    integer sl = 200;
    sleep(sl);

    // TODO FIXME Names of real stages
    // We do not set help text here, because it was set outside
    Progress::New( caption, " ", steps, [
            /* Progress stage 1/3 */
            _("Initialize Package Manager..."),
            /* Progress stage 2/3 */
            _("Check for required packages..."),
            /* Progress stage 3/3 */
            _("Read the previous settings")
        ], [
            /* Progress step 1/3 */
            _("Initalizing Package Manager..."),
            /* Progress step 2/3 */
            _("Checking for required packages..."),
            /* Progress step 3/3 */
            _("Reading the previous settings..."),
            /* Progress finished */
            _("Finished")
        ],
        ""
    );

    // Initialize Package Manager...
    if(Abort()) return false;
    Progress::NextStage();
    InitPkg();


    // heck for required packages...
    boolean success = true;

    if(Abort()) return false;
    Progress::NextStage();
    if (Package::InstalledAll(required_packages) == false) {
        success = Package::InstallAll(required_packages);
        if ( success == false ) {
            // error popup
            Report::Error(_("Cannot install required packages\n Universal Build Driver Assistant cannot continue!"));
            return false;
        }
    }

    // Read the previous settings
    if(Abort()) return false;
    Progress::NextStage();
    /* Error message */
    if(false) Report::Error(Message::CannotReadCurrentSettings());
    sleep(sl);


    if(Abort()) return false;
    modified = false;
    return true;
}

/**
 * Write all udba settings
 * @return true on success
 */
global boolean Write() {

    /* Udba read dialog caption */
    string caption = _("Saving udba Configuration");

    // TODO FIXME And set the right number of stages
    integer steps = 1;

    integer sl = 500;
    sleep(sl);

    // TODO FIXME Names of real stages
    // We do not set help text here, because it was set outside
    Progress::New(caption, " ", steps, [
        /* Progress stage 1/2 */
        _("Write the settings"),
        /* Progress stage 2/2 */
        _("Run SuSEconfig")
    ], [
        /* Progress step 1/2 */
        _("Writing the settings..."),
        /* Progress step 2/2 */
        _("Running SuSEconfig..."),
        /* Progress finished */
        _("Finished")
        ],
        ""
    );

    // write settings
    if(Abort()) return false;
    Progress::NextStage();
    /* Error message */
    if(false) Report::Error (_("Cannot write settings."));
    sleep(sl);

    // run SuSEconfig
    if(Abort()) return false;
    Progress::NextStage ();
    /* Error message */
    if(false) Report::Error (Message::SuSEConfigFailed());
    sleep(sl);

    if(Abort()) return false;
    /* Progress finished */
    Progress::NextStage();
    sleep(sl);

    if(Abort()) return false;
    return true;
}

/**
 * Get all udba settings from the first parameter
 * (For use by autoinstallation.)
 * @param settings The YCP structure to be imported.
 * @return boolean True on success
 */
global boolean Import (map settings) {
    // TODO FIXME: your code here (fill the above mentioned variables)...
    return true;
}

/**
 * Dump the udba settings to a single map
 * (For use by autoinstallation.)
 * @return map Dumped settings (later acceptable by Import ())
 */
global map Export () {
    // TODO FIXME: your code here (return the above mentioned variables)...
    return $[];
}

/**
 * Create a textual summary and a list of unconfigured cards
 * @return summary of the current configuration
 */
global list Summary() {
    // TODO FIXME: your code here...
    /* Configuration summary text for autoyast */
    return [ _("Configuration summary..."), [] ];
}

/**
 * Create an overview table with all configured cards
 * @return table items
 */
global list Overview() {
    // TODO FIXME: your code here...
    return [];
}

/**
 * Return packages needed to be installed and removed during
 * Autoinstallation to insure module has all needed software
 * installed.
 * @return map with 2 lists.
 */
global map AutoPackages() {
    list install_pkgs = required_packages;
    list remove_pkgs = [];
    return ($[ "install": install_pkgs, "remove": remove_pkgs ]);
}

/* EOF */
}
