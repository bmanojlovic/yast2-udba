/**
 * File:	include/udba/complex.ycp
 * Package:	Universal Driver Build Assistant
 * Summary:	Dialogs definitions
 * Authors:	Boris Manojlovic <boris@steki.net>
 *
 * $Id: complex.ycp $
 */

{

textdomain "udba";

import "Label";
import "Popup";
import "Wizard";
import "Wizard_hw";
import "Confirm";
import "Udba";
import "Pkg";

include "udba/helps.ycp";

/**
 * Return a modification status
 * @return true if data was modified
 */
boolean Modified() {
    return Udba::Modified();
}

boolean ReallyAbort() {
    return !Udba::Modified() || Popup::ReallyAbort(true);
}

boolean PollAbort() {
    return UI::PollInput() == `abort;
}

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol ReadDialog() {
    Wizard::RestoreHelp(HELPS["read"]:"");
    Udba::SetAbortFunction(PollAbort);
    if (!Confirm::MustBeRoot()) return `abort;
    boolean ret = Udba::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol WriteDialog() {
    Wizard::RestoreHelp(HELPS["write"]:"");
    Udba::SetAbortFunction(PollAbort);
    boolean ret = Udba::Write();
    return ret ? `next : `abort;
}

//list <map<string,any>> selected_packages = [];
/**
 * Summary dialog
 * @return dialog result
 */
any SummaryDialog() {
    // list of $[ "name":string, "version":string, "arch":string, "source":integer, "status":symbol, "locked":boolean ] maps
    //list <map <string,any> > packages_from_repo = Pkg::ResolvableProperties ("", `package, "");
    //foreach( map<string,any> p, Pkg::ResolvableProperties ("", `package, ""), {
    //        y2milestone (">>>>>>> %1", p["name"])
    //});


    foreach (map<string,any> pkg, Pkg::ResolvableProperties("", `package, ""), {
	string pkg_name = pkg["name"]:"";
        if (regexpmatch(pkg_name, "^udba-" ) == true)
        {  
            y2milestone("Package:  %1\n", pkg);
        }
    });


    //packages_from_repo = Pkg::ResolvableProperties("",`package, "");
    //y2milestone (">>>>>>>>>%1", packages_from_repo);

    /* Udba summary dialog caption */
    string caption = _("Universal Driver Build Assistant");

    list summary = Udba::Summary();

    term contents = `VBox (
        `Left(`Label(_("Currently configured and build status of driver recipes"))),
        `Left(
            `VBox (
                `MinSize( 70, 3,
                    // A table header
                    `Table(`id(`table),
                           `opt(`notify),
                           `header("Package Name","Built","Description"), 
                           [
                               `item(`id(1), "udba-nvidia-gfx","Yes", "opis"),
                               `item(`id(2), "udba-broadcom-sta","No","blab al"),
                               `item(`id(3), "nesto","Yes", ""),
                               `item(`id(4), "zika","No",""),
                               `item(`id(5), "slika","No","")
                           ])
                ),
                `HBox (
                    // [Install new recipe] [Build recipe] [Remove recipe]
                    // a push button
                    `PushButton(`id("InstallNewRecipe"), _("Install new recipe")),
                    // a push button
                    `PushButton(`id("BuildRecipe"), _("Build recipe")),
                    // a push button
                    `PushButton(`id("RemoveRecipe"), _("Remove recipe"))
                )
             )
        ));

    Wizard::SetContentsButtons(caption, contents, HELPS["summary"]:"",
	    Label::BackButton(), Label::FinishButton());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel || ret == `back) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	if (ret == `table) {
	    integer package_id  = (integer) UI::QueryWidget(`id(`table), `CurrentItem);
	    string package_name = (string) UI::QueryWidget(`table, `Cell( package_id, 0 ) ) ;
	    y2milestone(package_name);
        }
        /* overview dialog */
        else if(ret == "BuildRecipe") {
            ret = `overview;
            break;
        }
        else if(ret == "InstallNewRecipe") {
            any selected = UI::QueryWidget(`id(`table), `CurrentItem);
            if(selected == `other) {
                ret = `other;
            }
            else {
                ret = `configure;
            }
            break;
        }
        else if(ret == `next) {
            break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}

/**
 * Overview dialog
 * @return dialog result
 */
any OverviewDialog() {

    /* Udba overview dialog caption */
    string caption = _("Udba Overview");

    list overview = Udba::Overview();

    /* FIXME table header */
    term contents = Wizard_hw::ConfiguredContent(
	/* Table header */
	`header(_("Number"), _("Udba")),
	overview, nil, nil, nil, nil );

    contents = Wizard_hw::SpacingAround(contents, 1.5, 1.5, 1.0, 1.0);

    Wizard::SetContentsButtons(caption, contents, HELPS["overview"]:"",
	    Label::BackButton(), Label::FinishButton());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
        /* add */
        else if(ret == `add_button) {
	    /* FIXME */
            ret = `add;
            break;
        }
        /* edit */
        else if(ret == `edit_button) {
	    /* FIXME */
            ret = `edit;
            break;
        }
        /* delete */
        else if(ret == `delete_button) {
	    /* FIXME */
            continue;
        }
        else if(ret == `next || ret == `back) {
            break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}

/* EOF */
}
