/**
 * File:	include/udba/complex.ycp
 * Package:	Universal Driver Build Assistant
 * Summary:	Dialogs definitions
 * Authors:	Boris Manojlovic <boris@steki.net>
 *
 * $Id: complex.ycp $
 */

{

textdomain "udba";

import "Label";
import "Popup";
import "Wizard";
import "Wizard_hw";
import "Confirm";
import "Udba";
import "Pkg";
import "Package";
import "Popup";

include "udba/helps.ycp";

/**
 * Return a modification status
 * @return true if data was modified
 */
boolean Modified() {
    return Udba::Modified();
}

boolean ReallyAbort() {
    return !Udba::Modified() || Popup::ReallyAbort(true);
}

boolean PollAbort() {
    return UI::PollInput() == `abort;
}

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol ReadDialog() {
    Wizard::RestoreHelp(HELPS["read"]:"");
    Udba::SetAbortFunction(PollAbort);
    if (!Confirm::MustBeRoot()) return `abort;
    boolean ret = Udba::Read();
    return ret ? `next : `abort;
}

/**
 * Function check if disk is in list of devices
 * @param string disk
 * @param list<string> list of devices
 * @return list<term>
 */

list<term> updatePkgList (list<term> packageList, term vals)
{
    string ver1 = "";
    string ver2 = "";
    list<term> copyOfpackageList = [];
    
    if ( size (packageList) == 0 ) {
        y2milestone("LIST EMPTY ADDING");
        copyOfpackageList = add (copyOfpackageList, vals);
        return copyOfpackageList;
    }
    copyOfpackageList = packageList;
    boolean exist = false;
    integer idx = 0;
    
    foreach(term t, packageList, {
        if (t[1]:nil == vals[1]:nil) {
            y2milestone("package in list removing...: %1", vals[1]:nil);
            ver1 = (string) t[3]:nil;
            ver2 = (string) vals[3]:nil;
            if ( ver1 < ver2 ) {
                vals[3] = mergestring([ ver1, ver2 ], " : ");
                vals[4] = "Update Available";
            } else if ( ver1 == ver2 ) {
                vals[4] = "No Update Available";
            }
            copyOfpackageList = remove(copyOfpackageList,idx);
            break;
        }
        idx = idx + 1;
    });
    copyOfpackageList = add (copyOfpackageList, vals);
    return copyOfpackageList;
}


/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol WriteDialog() {
    Wizard::RestoreHelp(HELPS["write"]:"");
    Udba::SetAbortFunction(PollAbort);
    boolean ret = Udba::Write();
    return ret ? `next : `abort;
}

/**
 * Updates Available packages table
 * @return list <term>
 */

list <term> PreparePackagesList() {
    list<term> packageList = [];
    integer key = 1;
    string available = "";
    string pkg_version = "0.0";
    foreach (map<string,any> pkg, Pkg::ResolvableProperties("", `package, ""), {
        string pkg_name = pkg["name"]:"";
        if (regexpmatch(pkg_name, "^udba-" ) == true) {  
            if (pkg["status"]:nil == `available) {
                available="Not Installed";
            }
            packageList = updatePkgList (packageList,
                                        `item( 
                                            `id(key), 
                                            pkg["name"]:nil,
                                            "Yes", 
                                            pkg["version"]:"Null",
                                            available, 
                                            pkg["summary"]:nil
                                        ));
            key = key + 1;
        }
    });
    return packageList;
}

//list <map<string,any>> selected_packages = [];
/**
 * Summary dialog
 * @return dialog result
 */
any SummaryDialog() {

    string caption = _("Universal Driver Build Assistant");
    
    list summary = Udba::Summary();
    
    list<term> packageList = PreparePackagesList();
    
    term contents = `VBox (
        `Left(`Label(_("Currently configured and build status of driver recipes"))),
        `Left(
            `VBox (
                `MinSize( 70, 3,
                    // A table header
                    `Table(`id(`table),
                           `opt(`notify),
                           `header("Package Name","Built","Version", "Upgrade Available","Description"), 
                            packageList)
            ),
            `HBox (
                    // [Install new recipe] [Build recipe] [Remove recipe]
                    // a push button
                    `PushButton(`id("InstallOrUpdate"), _("Install / Update recipe")),
                    // a push button
                    `PushButton(`id("BuildRecipe"), _("Build / Rebuild recipe")),
                    // a push button
                    `PushButton(`id("RemoveRecipe"), _("Remove recipe"))
                ),
            `VSpacing(`opt(`hstretch), 1)
           )
        ));

    Wizard::SetContentsButtons(caption, contents, HELPS["summary"]:"",
        Label::BackButton(), Label::FinishButton());

    any ret = nil;
    while(true) {

        ret = UI::UserInput();

        /* abort? */
        if(ret == `abort || ret == `cancel || ret == `back) {
            if(ReallyAbort()) break;
            else continue;
        }
        if (ret == `table) {
            integer package_id  = (integer) UI::QueryWidget(`id(`table), `CurrentItem);
            string package_name = (string) UI::QueryWidget(`table, `Cell( package_id, 0 ) ) ;
            y2milestone("%1", package_name);
        }
        /* overview dialog */
        else if(ret == "BuildRecipe") {
            ret = `overview;
            break;
        }
        else if(ret == "InstallOrUpdate") {
            any selected = UI::QueryWidget(`id(`table), `CurrentItem);
            if(selected == `other) {
                ret = `other;
            } else {
                integer row_id  = (integer) UI::QueryWidget(`id(`table), `CurrentItem);
                string update_available = (string) UI::QueryWidget(`table, `Cell( row_id, 3 ) ) ;
                string package_name = (string) UI::QueryWidget(`table, `Cell( row_id, 0 ) ) ;
                y2milestone("Update for '%1' is '%2'", package_name, update_available);
                if (Package::InstalledAll([package_name]) == false) {
                    Package::InstallAll([package_name]);
                    Popup::ShowFeedback(_("Updating package information"),
                                        _("This may take a while"));
                    // this takes time...
                    list <term> tmplist = PreparePackagesList();
                    Popup::ClearFeedback();
                    UI::ChangeWidget(`id(`table),`Items, tmplist);
                    continue;
                } else {
                    continue;
                }
            }
            break;
        }
        else if(ret == `next) {
            break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}

/**
 * Overview dialog
 * @return dialog result
 */
any OverviewDialog() {

    /* Udba overview dialog caption */
    string caption = _("Udba Overview");

    list overview = Udba::Overview();

    /* FIXME table header */
    term contents = Wizard_hw::ConfiguredContent(
    /* Table header */
    `header(_("Number"), _("Udba")),
    overview, nil, nil, nil, nil );

    contents = Wizard_hw::SpacingAround(contents, 1.5, 1.5, 1.0, 1.0);

    Wizard::SetContentsButtons(caption, contents, HELPS["overview"]:"",
        Label::BackButton(), Label::FinishButton());

    any ret = nil;
    while(true) {

    ret = UI::UserInput(); 

    /* abort? */
    if(ret == `abort || ret == `cancel) {
        if(ReallyAbort()) break;
        else continue;
    }
        /* add */
        else if(ret == `add_button) {
        /* FIXME */
            ret = `add;
            break;
        }
        /* edit */
        else if(ret == `edit_button) {
        /* FIXME */
            ret = `edit;
            break;
        }
        /* delete */
        else if(ret == `delete_button) {
        /* FIXME */
            continue;
        }
        else if(ret == `next || ret == `back) {
            break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}

/* EOF */
}
