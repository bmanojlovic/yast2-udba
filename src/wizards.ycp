/**
 * File:	include/udba/wizards.ycp
 * Package:	Universal Driver Build Assistant
 * Summary:	Wizards definitions
 * Authors:	Boris Manojlovic <boris@steki.net>
 *
 * $Id: wizards.ycp $
 */

{

textdomain "udba";

import "Sequencer";
import "Wizard";

include "udba/complex.ycp";
include "udba/dialogs.ycp";

/**
 * Add a configuration of udba
 * @return sequence result
 */
any AddSequence() {

    /* FIXME: adapt to your needs */
    map aliases = $[
	"recipeSelection"	: ``(recipeSelectionDialog()),
	"buildProcess"	: ``(buildProcessDialog()),
    ];

    /* FIXME: adapt to your needs */
    map sequence = $[
	"ws_start" : "recipeSelection",
	"recipeSelection" : $[
	    `abort	: `abort,
        `next   : "buildProcess"
	],
	"buildProcess" : $[
	    `abort	: `abort
	]
    ];

    return Sequencer::Run(aliases, sequence);
}

/**
 * Main workflow of the udba tool
 * @return sequence result
 */
any MainSequence() {

    /* FIXME: adapt to your needs */
    map aliases = $[
	"summary"	:   ``( SummaryDialog() ),
	"configure"	: [ ``( AddSequence() ), true ]
    ];

    /* FIXME: adapt to your needs */
    map sequence = $[
	"ws_start" : "summary",
	"summary" : $[
	    `abort	: `abort,
	    `next	: `next,
	    `configure	: "configure",
	    `other	: "configure",
	],
	"configure" : $[
	    `abort	: `abort,
	    `next	: "summary",
	]
    ];

    any ret = Sequencer::Run(aliases, sequence);

    return ret;
}

/**
 * Whole configuration of udba
 * @return sequence result
 */
any UdbaSequence() {

    map aliases = $[
	"read"	: [ ``( ReadDialog() ), true ],
	"main"	:   ``( MainSequence() ),
	"write"	: [ ``( WriteDialog() ), true ]
    ];

    map sequence = $[
	"ws_start" : "read",
	"read" : $[
	    `abort	: `abort,
	    `next	: "main"
	],
	"main" : $[
	    `abort	: `abort,
	    `next	: "write"
	],
	"write" : $[
	    `abort	: `abort,
	    `next	: `next
	]
    ];

    Wizard::CreateDialog();

    any ret = Sequencer::Run(aliases, sequence);

    UI::CloseDialog();
    return ret;
}

/**
 * Whole configuration of udba but without reading and writing.
 * For use with autoinstallation.
 * @return sequence result
 */
any UdbaAutoSequence() {

    /* Initialization dialog caption */
    string caption = _("Universal Driver Build Assistant");
    /* Initialization dialog contents */
    term contents = `Label(_("Initializing..."));

    Wizard::CreateDialog();
    Wizard::SetContentsButtons(caption, contents, "",
	    Label::BackButton(), Label::NextButton());

    if (Package::InstalledAll(Udba::required_packages) == false) {
        Package::InstallAll(Udba::required_packages);
    }

    any ret = MainSequence();

    UI::CloseDialog();
    return ret;

}

/* EOF */
}
