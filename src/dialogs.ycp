/**
 * File:	include/udba/dialogs.ycp
 * Package:	Universal Driver Build Assistant
 * Summary:	Dialogs definitions
 * Authors:	Boris Manojlovic <boris@steki.net>
 *
 * $Id: dialogs.ycp $
 */

{

textdomain "udba";

import "Label";
import "Wizard";
import "Udba";
import "Package";


include "udba/helps.ycp";


/**
 * BuildProcess dialog
 * @return dialog result
 */
any BuildProcess () {

    /* Udba configure1 dialog caption */
    string caption = _("Udba Configuration");

    /* Udba configure1 dialog contents */
    term contents = `VBox(
            `LogView(`id(`log),
                "Buil&d Output",
                10,    // visible lines
                100),  // lines to store 
            `PushButton(`id(`abortbuild), `opt(`default), "&Cancel Build")
            );

    Wizard::SetContentsButtons(caption, contents, HELPS["c1"]:"",
        Label::BackButton(), Label::NextButton());

    // set buffer size if the progress should be updated more times
    // SCR::Write(.background.buffer_size, 10);
            
    // start subprocess
    integer id = (integer)(SCR::Execute(.process.start_shell, "/usr/lib/udba/build-driver-G02-binary"));
    string line = "";
    any ret = `abort;
    while(SCR::Read(.process.running, id) == true) {
        line = (string)SCR::Read(.process.read_line_stderr, id);
        if (line != nil) {
            y2warning("BUILD-E: %1", line);
            UI::ChangeWidget(`id(`log), `LastLine, sformat("STDERR:%1\n", line));
        }
        line = (string)SCR::Read(.process.read_line, id);

        if (line != nil) {
            y2warning("BUILD-O: %1", line);
            UI::ChangeWidget(`id(`log), `LastLine, sformat("STDOUT:%1\n", line));
        } else {
            sleep(300);
        }
        ret = (symbol) UI::PollInput();
        if( ret != nil ) {
            y2milestone ("ret=%1", ret);
        }
        // check if the abort button was pressed
        if (ret == `abortbuild) {
            SCR::Execute(.process.kill, id);        // kill the subprocess
            ret = `back;
            break;
        }
    }
    if (ret == nil ) ret = `back;
    return ret;
}

/**
 * Configure2 dialog
 * @return dialog result
 */
any Configure2Dialog () {

    /* Udba configure2 dialog caption */
    string caption = _("Udba Configuration");

    /* Udba configure2 dialog contents */
    term contents = `Label (_("Second part of configuration of udba"));

    Wizard::SetContentsButtons(caption, contents, HELPS["c2"]:"",
	    Label::BackButton(), Label::NextButton());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
        else if(ret == `next || ret == `back) {
            break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}

/* EOF */
}
