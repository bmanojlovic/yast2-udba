/**
 * File:	include/udba/dialogs.ycp
 * Package:	Universal Driver Build Assistant
 * Summary:	Dialogs definitions
 * Authors:	Boris Manojlovic <boris@steki.net>
 *
 * $Id: dialogs.ycp $
 */

{

textdomain "udba";

import "Label";
import "Wizard";
import "Udba";
import "Package";
import "Popup";
import "SourceManager";

include "udba/helps.ycp";
include "packager/repositories_include.ycp";

/**
 * BuildProcess dialog
 * @return dialog result
 */
any BuildProcess () {

    /* Udba configure1 dialog caption */
    string caption = _("Udba Configuration");

    /* Udba configure1 dialog contents */
    term contents = `VBox(
            `LogView(`id(`log),
                "Buil&d Output",
                10,    // visible lines
                0),  // lines to store 
            `PushButton(`id(`abortbuild), `opt(`default), "&Cancel Build")
            );

    Wizard::SetContentsButtons(caption, contents, HELPS["c1"]:"",
        Label::BackButton(), Label::NextButton());

    // assume it does not exist for some strange reason...
    SCR::Execute(.target.bash, "mkdir -p /var/tmp/udba-build-root/");

    // get file name of recipe tar archive
    map output = (map) SCR::Execute (.target.bash_output, sformat("/bin/rpm -ql %1", Udba::current_working_package));
    y2milestone(">>RECIPE>> %1",Udba::current_working_package);
    string recipe_archive = "";
    foreach (string line ,splitstring(output["stdout"]:"","\n"), {
        if (regexpmatch(line, "\.tar\.gz$" ) == true) {  
            y2milestone("Matched: %1", line);
            recipe_archive = line;
            break;
        }
    });
    SCR::Execute(.target.bash, sformat("/bin/tar -C /var/tmp/udba-build-root/ -zvxf %1",recipe_archive));


    // start subprocess
    integer id = (integer)(SCR::Execute(.process.start_shell, sformat ( "/usr/lib/udba/bin/udba-builder %1", Udba::current_working_package)));
    string line = "";
    any ret = `abort;
    while(SCR::Read(.process.running, id) == true) {
        line = (string)SCR::Read(.process.read_line_stderr, id);
        if (line != nil) {
            y2warning("BUILD-E: %1", line);
            UI::ChangeWidget(`id(`log), `LastLine, sformat("STDERR:%1\n", line));
        }

        line = (string)SCR::Read(.process.read_line, id);
        if (line != nil) {
            y2warning("BUILD-O: %1", line);
            UI::ChangeWidget(`id(`log), `LastLine, sformat("STDOUT:%1\n", line));
        } else {
            sleep(10); // sleep 10 ms is good enough so it is not hogging system while building :)
                       // and fast enough to not slow down build...
        }
        ret = (symbol) UI::PollInput();
        if( ret != nil ) {
            y2milestone ("ret=%1", ret);
        }
        // check if the abort button was pressed
        if (ret == `abortbuild) {
            SCR::Execute(.process.kill, id);        // kill the subprocess
            ret = `back;
            break;
        }
    }
    y2milestone("----------- LINE START --------");
    y2milestone("STDOUT=%1", line); // it should really be "UDBA: Build Complete" but not too reliable so lets 
                                    // assume set -e is a lot more better in this :)
    y2milestone("------------ LINE END ---------");

    integer retval = (integer) SCR::Read (.process.status, id);
    if (retval != nil && retval != 0) {
        Popup::Warning("Package building failed, please look at /var/log/YaST2/y2log file for clues");
    } else {
//    if ( line == "UDBA: Build Complete" ) {
	string reponame = substring(Udba::current_working_package,search(Udba::current_working_package,"-") + 1);
        map<string, any> newSrcMap = $[  "enabled"       : true,  
                                         "autorefresh"   : true,
                                         "name"          : reponame,
                                         "alias"         : reponame,
                                         "base_urls"     : [ sformat("dir:///srv/repos/%1", reponame) ],
                                         "priority"      : 99
                                     ];

        y2milestone("Adding repository  %1",substring(Udba::current_working_package,search(Udba::current_working_package,"-") + 1));
        integer newSrcID = Pkg::RepositoryAdd( newSrcMap );
        if (newSrcID != nil)
        {
            y2milestone("Successfully added the \"%1\" repository to the system.",substring(Udba::current_working_package,search(Udba::current_working_package,"-") + 1));
        }
        else
        {
            y2error("Could not add \"%1\".",substring(Udba::current_working_package,search(Udba::current_working_package,"-") + 1));
        }
    
        y2milestone("Saving all source changes to the system.");
        Popup::AnyMessage (_("UDBA Build Done!"),
                           sformat("Requested recipe is built succesfully\nAdded >%1< repository to system",reponame));

        Pkg::SourceSaveAll();
    }

    if (ret == nil ) ret = `back;
    return ret;
}

/**
 * Configure2 dialog
 * @return dialog result
 */
any Configure2Dialog () {

    /* Udba configure2 dialog caption */
    string caption = _("Udba Configuration");

    /* Udba configure2 dialog contents */
    term contents = `Label (_("Second part of configuration of udba"));

    Wizard::SetContentsButtons(caption, contents, HELPS["c2"]:"",
	    Label::BackButton(), Label::NextButton());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
        else if(ret == `next || ret == `back) {
            break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}

/* EOF */
}
